import React, { useState, useRef } from "react";
import HighlightWithinTextarea from "react-highlight-within-textarea";

function App() {
  const [text, setText] = useState("This is a sample text.");
  const textareaRef = useRef(null);
  const selectionRef = useRef(0);

  const handleMouseDown = (event) => {
    if (event.button !== 0) return; // Ensure it's the left mouse button

    // Manually get selectionStart by focusing on the textarea
    if (textareaRef.current) {
      setTimeout(() => {
        selectionRef.current = textareaRef.current.selectionStart;
      }, 0);
    }
  };

  const handleClick = () => {
    if (!textareaRef.current) return;

    const cursorPosition = selectionRef.current;
    const newText = " [INSERTED] ";

    // Insert new text at the cursor position
    const updatedText =
      text.slice(0, cursorPosition) + newText + text.slice(cursorPosition);

    setText(updatedText);
  };

  return (
    <div
      onMouseDown={handleMouseDown} // Capture cursor position
      onClick={handleClick} // Insert text on left mouse click
      style={{ display: "inline-block", cursor: "text" }}
    >
      <HighlightWithinTextarea
        value={text}
        onChange={(value) => setText(value)}
        highlight={/sample/g} // Example: Highlighting "sample"
        ref={textareaRef}
      />
    </div>
  );
}

export default App;

















import React, { useState, useRef } from "react";
import HighlightWithinTextarea from "react-highlight-within-textarea";

function App() {
  const [text, setText] = useState("This is a sample text.");
  const hiddenTextareaRef = useRef(null);
  const selectionRef = useRef(0);

  const handleMouseDown = (event) => {
    if (event.button !== 0) return; // Ensure left mouse button

    // Focus on the hidden textarea to track cursor position
    if (hiddenTextareaRef.current) {
      hiddenTextareaRef.current.focus();
      setTimeout(() => {
        selectionRef.current = hiddenTextareaRef.current.selectionStart;
      }, 0);
    }
  };

  const handleClick = () => {
    const cursorPosition = selectionRef.current;
    const newText = " [INSERTED] ";

    // Insert new text at the stored cursor position
    const updatedText =
      text.slice(0, cursorPosition) + newText + text.slice(cursorPosition);

    setText(updatedText);
  };

  return (
    <div
      onMouseDown={handleMouseDown} // Capture cursor position
      onClick={handleClick} // Insert text at cursor position
      style={{ display: "inline-block", cursor: "text", position: "relative" }}
    >
      <HighlightWithinTextarea
        value={text}
        onChange={(value) => setText(value)}
        highlight={/sample/g} // Example: Highlighting "sample"
      />
      {/* Hidden Textarea to track cursor position */}
      <textarea
        ref={hiddenTextareaRef}
        value={text}
        onChange={() => {}} // No update needed
        style={{
          position: "absolute",
          opacity: 0,
          pointerEvents: "none",
          height: 0,
          width: 0,
        }}
      />
    </div>
  );
}

export default App;
















import React, { useState, useRef } from "react";
import HighlightWithinTextarea from "react-highlight-within-textarea";

function App() {
  const [text, setText] = useState("This is a sample text.");
  const textareaRef = useRef(null);
  const selectionRef = useRef(0);

  const getCursorPosition = () => {
    const selection = window.getSelection();
    if (!selection || selection.rangeCount === 0) return;

    const range = selection.getRangeAt(0);
    const preCaretRange = range.cloneRange();
    preCaretRange.selectNodeContents(textareaRef.current);
    preCaretRange.setEnd(range.endContainer, range.endOffset);

    const cursorPosition = preCaretRange.toString().length;
    selectionRef.current = cursorPosition;
    console.log("Cursor Position:", cursorPosition);
  };

  return (
    <div
      onMouseUp={getCursorPosition} // Detect cursor position on mouse click
      onKeyUp={getCursorPosition} // Detect cursor position on keyboard movement
      style={{ position: "relative" }}
    >
      <HighlightWithinTextarea
        ref={textareaRef}
        value={text}
        onChange={(value) => setText(value)}
        highlight={/sample/g}
      />
    </div>
  );
}

export default App;














import React, { useState } from "react";

const EditableDivWithCursor = () => {
  const [cursorPosition, setCursorPosition] = useState(0);

  const handleCursorChange = () => {
    const selection = window.getSelection();
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const preCaretRange = range.cloneRange();
      preCaretRange.selectNodeContents(range.commonAncestorContainer);
      preCaretRange.setEnd(range.startContainer, range.startOffset);
      setCursorPosition(preCaretRange.toString().length);
    }
  };

  return (
    <div>
      <div
        contentEditable
        onKeyUp={handleCursorChange}
        onMouseUp={handleCursorChange}
        style={{ border: "1px solid black", padding: "5px", minHeight: "50px" }}
      >
        Editable Content
      </div>
      <p>Cursor Position: {cursorPosition}</p>
    </div>
  );
};

export default EditableDivWithCursor;















function findSubstringIndices(message, substring) {
    const regex = new RegExp(substring, 'g'); // Global regex to match all occurrences
    let matches = [...message.matchAll(regex)];
    let indices = matches.map(match => [match.index, match.index + substring.length - 1]);
    return indices;
}

const message = "my name is suchit , and my school is also suchit";
const substring = "suchit";






console.log(findSubstringIndices(message, substring));







function findSubstringIndices(message, substring) {
    // Escape special characters in the substring
    const escapedSubstring = substring.replace(/[-[{}()*+?.,\\^$|#\s]/g, '\\$&');
    const regex = new RegExp(escapedSubstring, 'g'); // Global regex to match all occurrences
    let matches = [...message.matchAll(regex)];
    let indices = matches.map(match => [match.index, match.index + substring.length - 1]);
    return indices;
}

const message = "my name is [suchit] , and my school is also [suchit]";
const substring = "[suchit]";

console.log(findSubstringIndices(message, substring));

